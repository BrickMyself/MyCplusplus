#include<iostream>
#include<stdlib.h>
#include<algorithm>
#include<vector>
using namespace std;
class Solution {
public:
	/**
	 *
	 * @param nums int整型一维数组
	 * @param numsLen int nums数组长度
	 * @return int整型
	 */
	void Swap(int *nums, int len)
	{
		int i = 0;
		for (i = 0; i < len; i++)
		{
			int j = 0;
			for (j = 1; j < len - i; j++)
			{
				if (nums[j -1] > nums[j])
				{
					int temp = 0;
					temp = nums[j-1];
					nums[j - 1] = nums[j];
					nums[j] = temp;
				}
			}
		}
	}
	int firstMissingPositive(int* nums, int numsLen) {
		// write code here
		Swap(nums, numsLen);
		int i = 0;
		for (i = 0; i < numsLen; i++)
		{
			cout << nums[i];
		}
		int j = 0;
		while (j < numsLen)
		{
			if (nums[j] < 0)
			{
				j++;
			}
			if (nums[j] + 1 == nums[j])
			{
				j++;
			}
			else {
				return nums[j] + 1;
			}
		}
		return 0;
	}
};
int main()
{
	Solution a;
	int arr[5] = { 1,-1,2,5,4 };
	int numslen = 5;
	a.firstMissingPositive(arr, numslen);
	return 0;
}